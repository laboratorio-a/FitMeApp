--- # Rules at http://eslint.org/docs/rules/

# ecmaFeatures:
#   arrowFunctions: false                     # enable arrow functions
#   binaryLiterals: false                     # enable binary literals
#   blockBindings: false                      # enable let and const (aka block bindings)
#   classes: false                            # enable classes
#   defaultParams: false                      # enable default function parameters
#   destructuring: false                      # enable destructuring
#   forOf: false                              # enable for-of loops
#   generators: false                         # enable generators
#   modules: false                            # enable modules and global strict mode
#   objectLiteralComputedProperties: false    # enable computed object literal property names
#   objectLiteralDuplicateProperties: false   # enable duplicate object literal properties in strict mode
#   objectLiteralShorthandMethods: false      # enable object literal shorthand methods
#   objectLiteralShorthandProperties: false   # enable object literal shorthand properties
#   octalLiterals: false                      # enable octal literals
#   regexUFlag: false                         # enable the regular expression u flag
#   regexYFlag: false                         # enable the regular expression y flag
#   restParams: false                         # enable the rest parameters
#   spread: false                             # enable the spread operator
#   superInFunctions: false                   # enable super references inside of functions
#   templateStrings: false                    # enable template strings
#   unicodeCodePointEscapes: false            # enable code point escapes
#   globalReturn: false                       # allow return statements in the global scope
#   jsx: false                                # enable JSX

parserOptions:
  sourceType: module

env:
  es6: true               # Enable all ecmaFeatures
  browser: true           # browser global variables
  # node: false           # Node.js global variables and Node.js-specific rules
  # amd: false            # defines require() and define() as global variables as per the amd spec
  # mocha: false          # adds all of the Mocha testing global variables
  # jasmine: false        # adds all of the Jasmine testing global variables for version 1.3 and 2.0
  # phantomjs: false      # phantomjs global variables
  # jquery: false         # jquery global variables
  # prototypejs: false    # prototypejs global variables
  # shelljs: false        # shelljs global variables

globals: {
  # e.g. angular: true
}

plugins:
 - import
  # e.g. react (must run `npm install eslint-plugin-react` first)


rules:
  ########## Possible Errors ##########

  comma-dangle:               # disallow trailing commas in object literals
   - error
   - always-multiline
  no-cond-assign: warn             # disallow assignment in conditional expressions
  # no-console: off                 # disallow use of console (off by default in the node environment)
  no-constant-condition: warn      # disallow use of constant expressions in conditions
  no-control-regex: warn           # disallow control characters in regular expressions
  # no-debugger: off                # disallow use of debugger
  no-dupe-args: warn               # disallow duplicate arguments in functions
  no-dupe-keys: warn               # disallow duplicate keys when creating object literals
  no-duplicate-case: warn          # disallow a duplicate case label
  no-empty-character-class: warn   # disallow the use of empty character classes in regular expressions
  no-empty: warn                  # disallow empty statements
  no-ex-assign: warn               # disallow assigning to the exception in a catch block
  no-extra-boolean-cast: warn      # disallow double-negation boolean casts in a boolean context
  # no-extra-parens: off            # disallow unnecessary parentheses (off by default)
  no-extra-semi: warn              # disallow unnecessary semicolons
  no-func-assign: warn             # disallow overwriting functions written as function declarations
  # no-inner-declarations: off      # disallow function or variable declarations in nested blocks
  no-invalid-regexp: warn          # disallow invalid regular expression strings in the RegExp constructor
  no-irregular-whitespace: error    # disallow irregular whitespace outside of strings and comments
  no-negated-in-lhs: warn          # disallow negation of the left operand of an in expression
  no-obj-calls: warn               # disallow the use of object properties of the global object (Math and JSON) as functions
  no-regex-spaces: warn            # disallow multiple spaces in a regular expression literal
  # no-reserved-keys: warn           # DEPRECATED disallow reserved words being used as object literal keys (off by default)
  no-sparse-arrays: warn           # disallow sparse arrays
  no-unexpected-multiline: error           # disallow confusing multiline expressions
  no-unreachable: warn             # disallow unreachable statements after a return, throw, continue, or break statement
  no-unsafe-finally: warn             # disallow control flow statements in finally blocks
  use-isnan: warn                  # disallow comparisons with the value NaN
  valid-jsdoc:                # Ensure JSDoc comments are valid (off by default)
    - error
    - requireParamDescription: false
      requireReturn: false
      prefer:
        returns: return
  valid-typeof: error               # Ensure that the results of typeof are compared against a valid string


  ########## Best Practices ##########

  # accessor-pairs: off           # enforces getter/setter pairs in objects (off by default)
  # block-scoped-var: off         # treat var statements as if they were block scoped (off by default)
  # complexity: off               # specify the maximum cyclomatic complexity allowed in a program (off by default)
  # consistent-return: off        # require return statements to either always or never specify values
  curly:                       # specify curly brace conventions for all control statements
   - error
   - multi-line
   - consistent  # Should be 'all' but with an exception for single-line then statements when there's no else clause
  default-case: error             # require default case in switch statements (off by default)
  dot-location:               # enforces consistent newlines before or after dots (off by default)
   - error
   - property
  # dot-notation: off             # encourages use of dot notation whenever possible
  eqeqeq: warn                   # require the use of === and !==
  guard-for-in: error             # make sure for-in loops have an if statement (off by default)
  no-alert: warn                 # disallow the use of alert, confirm, and prompt
  no-caller: error                # disallow use of arguments.caller or arguments.callee
  no-case-declarations: warn     # disallow lexical declarations in case clauses
  # no-div-regex: off             # disallow division operators explicitly at beginning of regular expression (off by default)
  no-else-return: warn           # disallow else after a return in an if (off by default)
  # no-empty-label: off           # disallow use of labels for anything other than loops and switches
  no-empty-pattern: warn           # disallow empty destructuring patterns
  # no-eq-null: off               # disallow comparisons to null without a type-checking operator (off by default)
  no-eval: error                  # disallow use of eval()
  no-extend-native: error         # disallow adding to native types
  no-extra-bind: error            # disallow unnecessary function binding
  no-fallthrough: warn           # disallow fallthrough of case statements
  # no-floating-decimal: off      # disallow the use of leading or trailing decimal points in numeric literals (off by default)
  # no-implied-eval: off          # disallow use of eval()-like methods
  # no-invalid-this: error            # disallow this keywords outside of classes or class-like objects
  # no-iterator: off              # disallow usage of __iterator__ property
  # no-labels: off                # disallow use of labeled statements
  # no-lone-blocks: off           # disallow unnecessary nested blocks
  # no-loop-func: off             # disallow creation of functions within loops
  no-multi-spaces: error          # disallow use of multiple spaces
  no-multi-str: error             # disallow use of multiline strings
  # no-native-reassign: off       # disallow reassignments of native objects
  # no-new-func: off              # disallow use of new operator for Function object
  no-new-wrappers: error          # disallows creating new instances of String, Number, and Boolean
  # no-new: off                   # disallow use of new operator when not part of the assignment or comparison
  # no-octal-escape: off          # disallow use of octal escape sequences in string literals, such as var foo = "Copyright \251";
  no-octal: warn                 # disallow use of octal literals
  # no-param-reassign: off        # disallow reassignment of function parameters (off by default)
  # no-process-env: off           # disallow use of process.env (off by default)
  # no-proto: off                 # disallow usage of __proto__ property
  no-redeclare: warn             # disallow declaring the same variable more than once
  # no-return-assign: off         # disallow use of assignment in return statement
  # no-script-url: off            # disallow use of javascript: urls
  no-self-assign: warn            # disallow assignments where both sides are exactly the same
  # no-self-compare: off          # disallow comparisons where both sides are exactly the same (off by default)
  # no-sequences: off             # disallow use of comma operator
  no-throw-literal: error         # restrict what can be thrown as an exception (off by default)
  # no-unused-expressions: off    # disallow usage of expressions in statement position
  no-unused-labels: warn      # disallow unused labels
  # no-void: off                  # disallow use of void operator (off by default)
  # no-warning-comments: off      # disallow usage of configurable warning terms in comments, e.g. TODO or FIXME (off by default)
  no-with: error                  # disallow use of the with statement
  # radix: off                    # require use of the second argument for parseInt() (off by default)
  # vars-on-top: off              # requires to declare all vars on top of their containing scope (off by default)
  # wrap-iife: off                # require immediate function invocation to be wrapped in parentheses (off by default)
  # yoda: off                     # require or disallow Yoda conditions


  ########## Strict Mode ##########

  # strict: off   # controls location of Use Strict Directives


  ########## Variables ##########

  # no-catch-shadow: off              # disallow the catch clause parameter name being the same as a variable in the outer scope (off by default in the node environment)
  # no-delete-var: off                # disallow deletion of variables
  # no-label-var: off                 # disallow labels that share a name with a variable
  # no-shadow: off                    # disallow declaration of variables already declared in the outer scope
  # no-shadow-restricted-names: off   # disallow shadowing of names such as arguments
  # no-undef: off                     # disallow use of undeclared variables unless mentioned in a /*global */ block
  # no-undef-init: off                # disallow use of undefined when initializing variables
  # no-undefined: off                 # disallow use of undefined variable (off by default)
  no-unused-vars: error               # disallow declaration of variables that are not used in the code
  # no-use-before-define: off         # disallow use of variables before they are defined


  ########## Node.js ##########

  # handle-callback-err: off      # enforces error handling in callbacks (off by default) (on by default in the node environment)
  # no-mixed-requires: off        # disallow mixing regular variable and require declarations (off by default) (on by default in the node environment)
  # no-new-require: off           # disallow use of new operator with the require function (off by default) (on by default in the node environment)
  # no-path-concat: off           # disallow string concatenation with __dirname and __filename (off by default) (on by default in the node environment)
  # no-process-exit: off          # disallow process.exit() (on by default in the node environment)
  # no-restricted-modules: off    # restrict usage of specified node modules (off by default)
  # no-sync: off                  # disallow use of synchronous methods (off by default)


  ########## Stylistic Issues ##########

  array-bracket-spacing: error          # enforce spacing inside array brackets (off by default)
  brace-style: error                    # enforce one true brace style (off by default)
  camelcase: error                      # require camel case names
  comma-spacing: error                  # enforce spacing before and after comma
  comma-style: error                    # enforce one true comma style (off by default)
  computed-property-spacing: error      # require or disallow padding inside computed properties (off by default)
  # consistent-this: off                # enforces consistent naming when capturing the current execution context (off by default)
  eol-last: warn                       # enforce newline at the end of file, with no multiple empty lines
  func-call-spacing: error            # require or disallow spacing between function identifiers and their invocations
  # func-names: off                     # require function expressions to have a name (off by default)
  # func-style: off                     # enforces use of function declarations or expressions (off by default)
  indent:                         # this option sets a specific tab width for your code (off by default)
    - warn
    - 2  # this is 4 for continuations, not supported, that's why only a warning is issued
  key-spacing: error                    # enforces spacing between keys and values in object literal properties
  keyword-spacing: error                    # enforce consistent spacing before and after keywords
  # lines-around-comment: off           # enforces empty lines around comments (off by default)
  linebreak-style: error                # disallow mixed 'LF' and 'CRLF' as linebreaks (off by default)
  max-len:                              # specify the maximum length of a line in your program (off by default)
    - error
    - code: 80
      tabWidth: 2
      ignoreUrls: true
      ignorePattern: '^goog\.(module|require)'
  # max-nested-callbacks: off           # specify the maximum depth callbacks can be nested (off by default)
  new-cap: error                        # require a capital letter for constructors
  # new-parens: off                     # disallow the omission of parentheses when invoking a constructor with no arguments
  # newline-after-var: off              # allow/disallow an empty newline after var statement (off by default)
  no-array-constructor: error           # disallow use of the Array constructor
  # no-continue: off                    # disallow use of the continue statement (off by default)
  # no-inline-comments: off             # disallow comments inline after code (off by default)
  # no-lonely-if: off                   # disallow if as the only statement in an else block (off by default)
  no-mixed-spaces-and-tabs: error       # disallow mixed spaces and tabs for indentation
  # vvv ??? vvv
  # no-multiple-empty-lines: error        # disallow multiple empty lines (off by default)
  # no-nested-ternary: off              # disallow nested ternary expressions (off by default)
  no-new-object: error                  # disallow use of the Object constructor
  # no-spaced-func: off                 # disallow space between function identifier and application
  no-tabs: error                          # disallow all tabs
  # no-ternary: off                     # disallow the use of ternary operators (off by default)
  no-trailing-spaces: warn             # disallow trailing whitespace at the end of lines
  # no-underscore-dangle: off           # disallow dangling underscores in identifiers
  object-curly-spacing: error             # enforce consistent spacing inside braces
  one-var:                            # allow just one var statement per function (off by default)
    - error
    - let: never
      const: never
      var: never
  # operator-assignment: off            # require assignment operator shorthand where possible or prohibit it entirely (off by default)
  # operator-linebreak: off             # enforce operators to be placed before or after line breaks (off by default)
  padded-blocks:                   # enforce padding within blocks (off by default)
    - error
    - never
  quote-props:                     # require quotes around object literal property names (off by default)
    - error
    - consistent
  quotes:                          # specify whether double or single quotes should be used
    - error
    - single
    - allowTemplateLiterals: true
  require-jsdoc:                     # require JSDoc comments
    - error
    - require:
        FunctionDeclaration: true
        MethodDefinition: true
        ClassDeclaration: true
  semi-spacing: error                   # enforce spacing before and after semicolons
  semi: error                          # require or disallow use of semicolons instead of ASI
  # sort-vars: off                      # sort variables within the same declaration block (off by default)
  # space-after-keywords: off           # require a space after certain keywords (off by default)
  space-before-blocks: error            # require or disallow space before blocks (off by default)
  space-before-function-paren:      # require or disallow space before function opening parenthesis (off by default)
    - error
    - never
  # space-in-parens: off                # require or disallow spaces inside parentheses (off by default)
  # space-infix-ops: off                # require spaces around operators
  # space-return-throw-case: off        # require a space after return, throw, and case
  # space-unary-ops: off                # require or disallow spaces before/after unary operators (words on by default, nonwords off by default)
  spaced-comment: error                 # require or disallow a space immediately following the // or /* in a comment (off by default)
  # wrap-regex: off                     # require regex literals to be wrapped in parentheses (off by default)


  ########## ECMAScript 6 ##########

  arrow-parens: warn                # require parentheses around arrow function arguments
  constructor-super: error        # verify super() callings in constructors (off by default)
  generator-star-spacing:    # enforce the spacing around the * in generator functions (off by default)
    - error
    - before: false
      after: true
  no-new-symbol: error            # disallow new operators with the Symbol object
  no-this-before-super: error     # disallow to use this/super before super() calling in constructors (off by default)
  no-var: error                   # require let or const instead of var (off by default)
  # object-shorthand: off         # require method and property shorthand syntax for object literals (off by default)
  # prefer-const: off             # suggest using of const declaration for variables that are never modified after declared (off by default)
  prefer-rest-params: error       # require rest parameters instead of arguments
  prefer-spread: error            # require spread operators instead of .apply()
  rest-spread-spacing: error      # enforce spacing between rest and spread operators and their expressions
  yield-star-spacing: error       # require or disallow spacing around the * in yield* expressions

  ########## Legacy ##########

  # max-depth: off        # specify the maximum depth that blocks can be nested (off by default)
  # max-len: off          # specify the maximum length of a line in your program (off by default)
  # max-params: off       # limits the number of parameters that can be used in the function declaration. (off by default)
  # max-statements: off   # specify the maximum number of statement allowed in a function (off by default)
  # no-bitwise: off       # disallow use of bitwise operators (off by default)
  # no-plusplus: off      # disallow use of unary operators, ++ and -- (off by default)
